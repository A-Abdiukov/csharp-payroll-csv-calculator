<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyPayProject</name>
    </assembly>
    <members>
        <member name="T:PayrollApplication.CsvImporter">
            <summary>
            The class reads the csv file 
            </summary>
        </member>
        <member name="M:PayrollApplication.CsvImporter.ImportPayRecords(System.String)">
            <summary>
            All Import Pay Records does - call another function and gets its output from there.
            csv_FilePath is gathered from Program.cs
            </summary>
            <param name="csv_FilePath">The path of the csv file that needs to be read and converted. This document does not have its taxes calculated.</param>
            <returns> List PayRecord which contains a list of 'ResidentPayRecord's and 'WorkingHolidayPayRecord's </returns>
        </member>
        <member name="M:PayrollApplication.CsvImporter.ReadFileContents(System.String)">
            <summary>
            csv_FilePath is gathered from ImportPayRecords which gets it from Program.cs
            This method reads out the csv file employee-payroll-data.csv
            Afterwards, each line of the csv file gets separated into variables = id, hours, rates, visa, YearToDate
            These variables get sent to the createPayRecord()
            The createPayRecord() method outputs either ResidentPayRecord object or WorkingHolidayPayRecord
            Afterwards, ResidentPayRecord/WorkingHolidayPayRecord get added to the List PayRecord output.
            </summary>
            <param name="csv_FilePath">The path of the csv file that needs to be read and converted. This document does not have its taxes calculated.</param>
            <returns> List PayRecord , which contains many ResidentPayRecord/WorkingHolidayPayRecord objects.</returns>
        </member>
        <member name="M:PayrollApplication.CsvImporter.createPayRecord(System.Int32,System.Double[],System.Double[],System.String,System.String)">
            <summary>
            All of the variables ara retrieved from ReadFileContents()
            The program then determines whether the tax should be calculated by the Working Holiday rate or by the Resident Pay rate
            The program determines that by looking at the visa = if something was entered into a visa field, the program determines it is a Working Holiday rate
            If nothing was entered into the visa field, then it is a Resident Pay rate.
            </summary>
            <param name="id">Unique identifier of the employee.</param>
            <param name="hours">Contains a list of hours an employee worked.</param>
            <param name="rates">Contains a lsit of rates an employee worked.</param>
            <param name="visa">Contains information regarding which visa the employee worked under.</param>
            <param name="YearToDate">Contains the YearToDate employee pay</param>
            <returns>Either a ResidentPayRecord or WorkingHolidayPayRecord</returns>
        </member>
        <member name="T:PayrollApplication.PayRecord">
            <summary>
            Abstract class that is used as a base for other classes
            </summary>
        </member>
        <member name="F:PayrollApplication.PayRecord._hours">
             <summary>
            For each id there might be multiple hours and rates
            So for instance for ID 1 there are many hours and rates:
             ID  HR  RATE
             1,  2,  25
             1,  3,  25
             1,  3,  25
             1,  4,  25
             1,  5,  32
             That is why _hours and _rates are arrays
             </summary>
        </member>
        <member name="F:PayrollApplication.PayRecord._rates">
            <summary>
            Contains an array of different rates an employee has worked
            </summary>
        </member>
        <member name="P:PayrollApplication.PayRecord.Tax">
             <summary>
            Tax is used as an abstract class. Later, in WorkingHolidayPayRecord and ResidentPayRecord this class gets overwritten
            for specific tax calculations, as WorkingHoliday and ResidentPay have different tax rates.
             </summary>
             <returns> Tax calculated (it is calculated in other classes, this is just the abstract variable) </returns>
        </member>
        <member name="P:PayrollApplication.PayRecord.Id">
            <summary>
            Id is used for id of a specific employee. For one Id, there might be many different hours and rates.
            </summary>
            <returns>The value of public int Id. This value is gathered from private int id. </returns>
        </member>
        <member name="P:PayrollApplication.PayRecord.Net">
            <summary>
            Net is calculated by getting the difference between the total gross amount of money earned = 'Gross', and the tax paid = 'Tax'.
            </summary>
            <returns>The amount left after paying tax.</returns>
        </member>
        <member name="P:PayrollApplication.PayRecord.Gross">
            <summary>
            Gross gets calculated in the following way
            Each hour gets multiplied by the corresponding rate e.g :
            <example>_hours[4] * _rates[4]</example>
            And then the result of calculation gets added to the Gross value
            </summary>
            <returns>The amount of money the person earnt BEFORE paying taxes.</returns>
            <remarks>As soon as the amount of hours becomes 0, the Gross calculation finishes. This can create problems if someone entered the amount of hours as 0.</remarks>
        </member>
        <member name="M:PayrollApplication.PayRecord.#ctor(System.Int32,System.Double[],System.Double[])">
            <summary>
            Defining base constructor.
            WorkingHolidayPayRecord, ResidentPayRecord use this base constructor, and then add on some values to fit their needs.
            </summary>
            <param name="id">Unique identifier of the employee</param>
            <param name="hours">Contains a list of hours an employee worked.</param>
            <param name="rates">Contains a list of rates an employee worked.</param>
        </member>
        <member name="M:PayrollApplication.PayRecord.GetDetails">
            <summary>
            Defining base output method.
            WorkingHolidayPayRecord, ResidentPayRecord use this base output string, and then modify it to fit their needs.
            Gross, Net and Tax get converted into currency format with {0:C}
            </summary>
            <returns>All employee details get outputted into the console format.</returns>
        </member>
        <member name="M:PayrollApplication.PayRecord.GetCsvDetails">
            <summary>
            Defining the output method/string that is used to output into a csv file.
            This method/string is different from GetDetails(), as GetDetails() outputs it in the console format, whereas this outputs it into a csv file format
            Gross, Net and Tax get converted into currency format with Math.Round(Gross, 2)
            </summary>
            <returns>Gross, Net and Tax of all employees get outputted into csv format.</returns>
        </member>
        <member name="T:PayrollApplication.PayRecordWriter">
            <summary>
            Writes down the calculated taxes for each employee into a csv file and into a Console File.
            </summary>
        </member>
        <member name="M:PayrollApplication.PayRecordWriter.Write(System.String,System.Collections.Generic.List{PayrollApplication.PayRecord},System.Boolean)">
            <summary>
            This method writes down the calculated taxes for each employee into a csv file and into a Console File.
            The taxes are calculated in PayRecord class
            The GetDetails() method and GetCsvDetails() method is called from PayRecord class
            </summary>
            <param name="fileName">The location of the csv file where the calculated taxes for each employee would be</param>
            <param name="records">A list of ResidentPayRecords and WorkingHolidayPayRecords</param>
            <param name="writeToConsole">Boolean which determines whether the user wants to write something in the console and csv file or only csv file</param>
            <returns>void, but all output is in the console and csv file</returns>
        </member>
        <member name="M:PayrollApplication.Program.Main(System.String[])">
            <summary>
            Proram.cs creates a path for csv file (export, e.g it has its taxes calculated)
            Program.cs also creates a path for the initial csv file that needs to be converted (import e.g before taxes are calculated)
            Program.cs calls a method that reads the initial csv file (import) and then converts it into a PayRecord list
            Program.cs then calls a method that gets the list, calculates the taxes for each employee in that list and outputs it into console/csv file
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:PayrollApplication.ResidentPayRecord.Tax">
            <summary>
            Defining Tax public field
            It gets its information from TaxCalculator method
            Thus, by calling this field, the Tax gets calculated.
            The idea is that a ResidentPayRecord type should be able to calculate its Tax by adding ".Tax"
            </summary>
            <returns>Calculated tax (Residential Tax)</returns>
        </member>
        <member name="M:PayrollApplication.ResidentPayRecord.#ctor(System.Int32,System.Double[],System.Double[])">
            <summary>
            Calling a constructor that retrieves all values from the base PayRecord.cs constructor.
            </summary>
            <param name="id">Unique identifier of the employee</param>
            <param name="hours">Contains a list of hours an employee worked.</param>
            <param name="rates">Contains a list of rates an employee worked.</param>
        </member>
        <member name="M:PayrollApplication.TaxCalculator.CalculateResidentialTax(System.Double)">
            <summary>
            Double below calculates the residential task
            The program determines which tax bracket the employee is in
            And then calculates the tax according to taht tax bracket
            </summary>
            <param name="gross">The amount of money the person earnt BEFORE paying taxes</param>
            <returns>Calculated tax (Residential Tax)</returns>
        </member>
        <member name="M:PayrollApplication.TaxCalculator.CalculateWorkingHolidayTax(System.Double,System.Int32)">
            <summary>
            Method below calculates the working holiday tax
            The program determines which tax bracket the employee is in
            And then calculates the tax according to taht tax bracket
            </summary>
            <param name="gross">The amount of money the person earnt BEFORE paying taxes</param>
            <param name="YearToDate">Contains the YearToDate employee pay</param>
            <returns>Calculated tax (Working Holiday Tax)</returns>
        </member>
        <member name="P:PayrollApplication.WorkingHolidayPayRecord.YearToDate_public">
            <summary>
            Gets the information from the private field and applies it to the public field.
            </summary>
        </member>
        <member name="P:PayrollApplication.WorkingHolidayPayRecord.Visa">
            <summary>
            Gets the information from the private field and applies it to the public field.
            </summary>
        </member>
        <member name="P:PayrollApplication.WorkingHolidayPayRecord.Tax">
            <summary>
            Tax public double gets its information from TaxCalculator method.
            Thus, by calling this field, the Tax gets calculated.
            The idea is that a WorkingHolidayPayRecord type should be able to calculate its Tax by adding ".Tax"
            </summary>
            <returns>Calculated tax (Working Holiday Tax)</returns>
        </member>
        <member name="M:PayrollApplication.WorkingHolidayPayRecord.#ctor(System.Int32,System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Constructor gets its information from PayRecord.cs consturctor
            And then adds variables that are specific to WorkingHolidayPayRecord, such as Visa, YearToDate
            </summary>
            <param name="id">Unique identifier of the employee.</param>
            <param name="hours">Contains a list of hours an employee worked.</param>
            <param name="rates">Contains a lsit of rates an employee worked.</param>
            <param name="visa">Contains information regarding which visa the employee worked under.</param>
            <param name="YearToDate">Contains the YearToDate employee pay</param>
        </member>
        <member name="M:PayrollApplication.WorkingHolidayPayRecord.GetDetails">
            <summary>
            The method gets its information from GetDetails method in the PayRecord.cs
            Then it adds unique information that is specific to WorkingHolidayPayRecord.cs , such as Visa, YearToDate 
            </summary>
            <returns>Returns information about id, hours, rates, visa and YearToDate. Information is styled to be displayed in Console.</returns>
        </member>
    </members>
</doc>
